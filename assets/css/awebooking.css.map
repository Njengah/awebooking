{"version":3,"sources":["awebooking.scss","../../node_modules/bootstrap/scss/mixins/_screen-reader.scss","../../node_modules/bootstrap/scss/mixins/_grid.scss","frontend/_grid.scss","../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"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","file":"awebooking.css","sourcesContent":["@import \"utils/mixins\";\r\n@import \"node_modules/bootstrap/scss/functions\";\r\n@import \"node_modules/bootstrap/scss/variables\";\r\n@import \"node_modules/bootstrap/scss/mixins\";\r\n\r\n.screen-reader-text {\r\n  @include sr-only;\r\n}\r\n\r\n.awebooking,\r\n.awebooking-block {\r\n  @import \"frontend/grid\";\r\n}\r\n\r\n/* Inline datepicker */\r\n.abrs-inline-datepicker .flatpickr-calendar.inline {\r\n  margin-top: 0;\r\n\r\n  &,\r\n  .flatpickr-days {\r\n    width: 100% !important;\r\n  }\r\n\r\n  .dayContainer {\r\n    width: 50% !important;\r\n    max-width: 50% !important;\r\n  }\r\n\r\n  .flatpickr-day {\r\n    max-width: 14.2857143%;\r\n  }\r\n}\r\n\r\n/* List room data table */\r\n.abroom__table {\r\n  table-layout: auto;\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n  margin: 0;\r\n  width: 100%;\r\n  border: none;\r\n\r\n  td,\r\n  th {\r\n    padding: 0;\r\n    border: none;\r\n  }\r\n\r\n  .column-room-info {\r\n    width: auto;\r\n    vertical-align: top;\r\n  }\r\n\r\n  .column-room-button,\r\n  .column-room-inventory {\r\n    width: 1%;\r\n    vertical-align: middle;\r\n  }\r\n\r\n  .column-room-button {\r\n    white-space: nowrap;\r\n  }\r\n}\r\n","// Only display content to screen readers\n//\n// See: https://a11yproject.com/posts/how-to-hide-content/\n// See: https://hugogiraudel.com/2016/10/13/css-hide-and-seek/\n\n@mixin sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n// Use in conjunction with .sr-only to only display content when it's focused.\n//\n// Useful for \"Skip to main content\" links; see https://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1\n//\n// Credit: HTML5 Boilerplate\n\n@mixin sr-only-focusable {\n  &:active,\n  &:focus {\n    position: static;\n    width: auto;\n    height: auto;\n    overflow: visible;\n    clip: auto;\n    white-space: normal;\n  }\n}\n","/// Grid system\n//\n// Generate semantic grid columns with these mixins.\n\n@mixin make-container() {\n  width: 100%;\n  padding-right: ($grid-gutter-width / 2);\n  padding-left: ($grid-gutter-width / 2);\n  margin-right: auto;\n  margin-left: auto;\n}\n\n\n// For each breakpoint, define the maximum width of the container in a media query\n@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {\n  @each $breakpoint, $container-max-width in $max-widths {\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      max-width: $container-max-width;\n    }\n  }\n}\n\n@mixin make-row() {\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: ($grid-gutter-width / -2);\n  margin-left: ($grid-gutter-width / -2);\n}\n\n@mixin make-col-ready() {\n  position: relative;\n  // Prevent columns from becoming too narrow when at smaller grid tiers by\n  // always setting `width: 100%;`. This works because we use `flex` values\n  // later on to override this initial width.\n  width: 100%;\n  min-height: 1px; // Prevent collapsing\n  padding-right: ($grid-gutter-width / 2);\n  padding-left: ($grid-gutter-width / 2);\n}\n\n@mixin make-col($size, $columns: $grid-columns) {\n  flex: 0 0 percentage($size / $columns);\n  // Add a `max-width` to ensure content within each column does not blow out\n  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari\n  // do not appear to require this.\n  max-width: percentage($size / $columns);\n}\n\n@mixin make-col-offset($size, $columns: $grid-columns) {\n  $num: $size / $columns;\n  margin-left: if($num == 0, 0, percentage($num));\n}\n",".columns {\r\n  @include make-row();\r\n}\r\n\r\n.columns.no-gutters {\r\n  margin-right: 0;\r\n  margin-left: 0;\r\n\r\n  > .column,\r\n  > [class*=\"column-\"] {\r\n    padding-right: 0;\r\n    padding-left: 0;\r\n  }\r\n}\r\n\r\n.flex-space {\r\n  flex-grow: 1;\r\n}\r\n\r\n// Common properties for all breakpoints\r\n%grid-column {\r\n  position: relative;\r\n  width: 100%;\r\n  min-height: 1px; // Prevent columns from collapsing when empty\r\n  padding-right: ($grid-gutter-width / 2);\r\n  padding-left: ($grid-gutter-width / 2);\r\n}\r\n\r\n@each $breakpoint in map-keys($grid-breakpoints) {\r\n  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\r\n\r\n  .column#{$infix} {\r\n    @extend %grid-column;\r\n  }\r\n\r\n  // Allow columns to stretch full width below their breakpoints\r\n  @for $i from 1 through $grid-columns {\r\n    .column#{$infix}-#{$i} {\r\n      @extend %grid-column;\r\n    }\r\n  }\r\n\r\n  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {\r\n    // Provide basic `.col-{bp}` classes for equal-width flexbox columns\r\n    .column#{$infix} {\r\n      flex-basis: 0;\r\n      flex-grow: 1;\r\n      max-width: 100%;\r\n    }\r\n\r\n    @for $i from 1 through $grid-columns {\r\n      .column#{$infix}-#{$i} {\r\n        @include make-col($i, $grid-columns);\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}